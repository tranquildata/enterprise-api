# Copyright (c) 2022-2025, Tranquil Data, Inc. All rights reserved.

openapi: 3.0.0

info:
  title: Tranquil Data (TM) Enterprise Edition APIs
  description: >
    This is the complete API for the engine. It covers routines for provisioning
    entity state, managing subject context, exporting datastore access, and checking
    on the overall health of a service and its components.
  version: 1.0.1
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

externalDocs:
  description: "Find out more about Tranquil Data"
  url: "https://tranquildata.com"

tags:
  - name: root
    description: Routines to query status and state for a specific peer.
  - name: entity
    description: Routines for operating on consensus-driven, durable Entity Context.
  - name: datastore
    description: Routines for managing non-durable datastore exports.
  - name: subject
    description: Routines for operating on durable Subject Context.

servers:
  - url: http://localhost

paths:

  #
  # Root API paths
  #

  /:

    head:
      tags:
        - root
      summary: Test that this peer is running and ready
      operationId: checkPeer
      responses:
        '200':
          description: The peer is available and responsive
        '500':
          description: There is some internal error with the peer

    options:
      tags:
        - root
      summary: Returns the names of all services exposed by this peer
      operationId: getServices
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './root_schema.yaml#/components/schemas/ServiceList'
              example:
                services:
                  - context
                  - datastores
                  - metrics
        '500':
          description: There is some internal error with the peer

    get:
      tags:
        - root
      summary: Returns details of the responding peer
      operationId: getPeerDetail
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './root_schema.yaml#/components/schemas/PeerDetail'
              example:
                identifier: 1
                certificate: AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        '500':
          description: There is some internal error with the peer

  #
  # Entity Context API paths
  #

  /context/entity/policies:

    get:
      tags:
        - entity
      summary: Returns all policies, or a specific policy, optionally at some revision
      description: >
        If no name is provided, then by default this function returns the name, entity version,
        and content type of all currently-provisioned policies. If a specific checkpoint is provided,
        then the same detail is returned but only for the policies provisioned at that time.
        An entity version may not be specified if a specific policy is not requested.

        If a name is provided, then only details of that policy are returned. By default, the
        content is returned for the named policy. Either the checkpoint or the entity version
        (bot not both) may be provided to retrieve the policy at a specific revision.
      operationId: getPolicies
      parameters:
        - in: query
          name: policyName
          schema:
            type: string
          required: false
          description: Name of a specific policy to retrieve
        - in: query
          name: checkpoint
          schema:
            type: integer
          required: false
          description: Checkpoint to use in resolving policies (by default the latest is used)
        - in: query
          name: entityVersion
          schema:
            type: integer
          required: false
          description: Specific entity version to resolve (by default the latest is used)
        - in: query
          name: includeContent
          schema:
            type: boolean
          required: false
          description: If true, includes the content of the policy or policies 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './entity_schema.yaml#/components/schemas/PolicyList'
              example:
                - name: urn:tranquildata:policy:bootstrap
                  entityVersion: 1
                  contentType: application/xml+xacml
                - name: ThirdPartyConsent
                  entityVersion: 2
                  contentType: application/json+xacml
        '400':
          description: A query parameter was invalid, an entity version was given without a named policy, or both an entity version and checkpoint were given
        '404':
          description: The named policy or checkpoint or entity version was unknown
        '500':
          description: There was some internal failure resolving the requested policies
    
    post:
      tags:
        - entity
      summary: Provisions a new policy
      operationId: addPolicy
      requestBody:
        description: >
          A valid Tranquil Data policy encoded according to content type.
          Content type is required.
        required: true
        content:
          application/json+xacml:
            schema:
              $ref: './entity_schema.yaml#/components/schemas/PolicyJSONContent'
          application/xml+xacml:
            schema:
              $ref: './entity_schema.yaml#/components/schemas/PolicyXMLContent'
      responses:
        '200':
          description: OK
        '400':
          description: >
            The policy was invalid or a policy with the same name already exists,
            or content type did not match the policy
        '500':
          description: There was some internal failure to accept the policy

    put:
      tags:
        - entity
      summary: Creates or updates the policy
      operationId: upsertPolicy
      requestBody:
        description: >
          A valid Tranquil Data policy encoded according to content type.
          Content type is required.
        required: true
        content:
          application/json+xacml:
            schema:
              $ref: './entity_schema.yaml#/components/schemas/PolicyJSONContent'
          application/xml+xacml:
            schema:
              $ref: './entity_schema.yaml#/components/schemas/PolicyXMLContent'
      responses:
        '200':
          description: OK
        '400':
          description: The policy was invalid or content type did not match the policy
        '500':
          description: There was some internal failure to accept the policy

  /context/entity/models:

    get:
      tags:
        - entity
      summary: Returns all models, or a specific model, optionally at some revision
      description: >
        If no name is provided, then by default this function returns the name, entity version,
        and content type of all currently-provisioned models. If a specific checkpoint is provided,
        then the same detail is returned but only for the models provisioned at that time.
        An entity version may not be specified if a specific model is not requested.

        If a name is provided, then only details of that model are returned. By default, the
        content is returned for the named model. Either the checkpoint or the entity version
        (bot not both) may be provided to retrieve the model at a specific revision.
      operationId: getModels
      parameters:
        - in: query
          name: modelName
          schema:
            type: string
          required: false
          description: Name of a specific model to retrieve
        - in: query
          name: checkpoint
          schema:
            type: integer
          required: false
          description: Checkpoint to use in resolving models (by default the latest is used)
        - in: query
          name: entityVersion
          schema:
            type: integer
          required: false
          description: Specific entity version to resolve (by default the latest is used)
        - in: query
          name: includeContent
          schema:
            type: boolean
          required: false
          description: If true, includes the content of the model or models 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './entity_schema.yaml#/components/schemas/ModelList'
              example:
                - name: OperationsModel
                  entityVersion: 1
                  contentType: application/json
                - name: SharingModel
                  entityVersion: 2
                  contentType: application/json
        '400':
          description: A query parameter was invalid, an entity version was given without a named model, or both an entity version and checkpoint were given
        '404':
          description: The named model or checkpoint or entity version was unknown
        '500':
          description: There was some internal failure resolving the requested models
    
    post:
      tags:
        - entity
      summary: Provisions a new model
      operationId: addModel
      requestBody:
        description: >
          A valid Tranquil Data model encoded according to content type.
          Content type is required.
        required: true
        content:
          application/json:
            schema:
              $ref: './entity_schema.yaml#/components/schemas/ModelContent'
      responses:
        '200':
          description: OK
        '400':
          description: >
            The model was invalid or a model with the same name already exists,
            or content type did not match the model
        '500':
          description: There was some internal failure to accept the model

    put:
      tags:
        - entity
      summary: Creates or updates the model
      operationId: upsertModel
      requestBody:
        description: >
          A valid Tranquil Data model encoded according to content type.
          Content type is required.
        required: true
        content:
          application/json:
            schema:
              $ref: './entity_schema.yaml#/components/schemas/ModelContent'
      responses:
        '200':
          description: OK
        '400':
          description: The model was invalid or content type did not match the model
        '500':
          description: There was some internal failure to accept the model

  /context/entity/peers:

    get:
      tags:
        - entity
      summary: Returns all peers, or a specific peer, optionally at some revision
      description: >
        If no identifier is provided, then by default this function returns the identifier, public
        key certificate, and entity version of all currently-provisioned peers. If a specific
        checkpoint is provided, then the same detail is returned but only for the peers provisioned at
        that time. An entity version may not be specified if a specific peer is not requested.

        If an identifier is provided, then only details of that peer are returned. By default, all
        details about that peer are returned. Either the checkpoint or the entity version (bot not
        both) may be provided to retrieve the peer at a specific revision.
      operationId: getPeers
      parameters:
        - in: query
          name: peerId
          schema:
            type: integer
          required: false
          description: Identifier for a specific peer to retrieve
        - in: query
          name: checkpoint
          schema:
            type: integer
          required: false
          description: Checkpoint to use in resolving peers (by default the latest is used)
        - in: query
          name: entityVersion
          schema:
            type: integer
          required: false
          description: Specific entity version to resolve (by default the latest is used)
        - in: query
          name: includeDetails
          schema:
            type: boolean
          required: false
          description: If true, includes all details of the peer or peers 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './entity_schema.yaml#/components/schemas/PeerList'
              example:
                - identifier: 1
                  certificate: AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
                  entityVersion: 2
                  policyName: AllPolicy
                  properties:
                    country: US
        '400':
          description: A query parameter was invalid, an entity version was given without an identified peer, or both an entity version and checkpoint were given
        '404':
          description: The identified peer or checkpoint or entity version was unknown
        '500':
          description: There was some internal failure resolving the requested peers

    post:
      tags:
        - entity
      summary: Provisions a new peer with the associated Public Key Certificate, returning the identifier for the new peer
      operationId: addPeer
      requestBody:
        description: A PEM-encoded Public Key Certificate
        required: true
        content:
          text/plain:
            schema:
              type: string
            example: AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: integer
              example: 1
        '400':
          description: The Public Key Certificate was missing or invalid
        '500':
          description: There was some internal failure to provision the peer

    put:
      tags:
        - entity
      summary: Updates the associated policy, properties, or both for a given peer
      operationId: updatePeer
      parameters:
        - in: query
          name: peerId
          schema:
            type: integer
          required: true
          description: Identifier for a specific peer to update
        - in: query
          name: policyName
          schema:
            type: string
          required: false
          description: The name of a policy for a peer to be associated with
      requestBody:
        description: An optional set of properties to apply to the peer, where an empty value means that the named property should be removed 
        required: false
        content:
          application/json:
            schema:
              $ref: './entity_schema.yaml#/components/schemas/PropertyMap'
            example:
              role: reporting
              country: DE
      responses:
        '200':
          description: OK
        '400':
          description: The peer identifier was missing or invalid or the policyName or properties were invalid
        '404':
          description: The identifier or the policyName was unknown
        '500':
          description: There was some internal failure to update the peer

    delete:
      tags:
        - entity
      summary: De-provisions the identified peer, shutting it down immediately if it is active
      operationId: removePeer
      parameters:
        - in: query
          name: peerId
          schema:
            type: integer
          required: true
          description: Identifier for a specific peer to deprovision
      responses:
        '200':
          description: OK
        '400':
          description: The peer identifier was missing or invalid
        '404':
          description: The identifier was unknown
        '500':
          description: There was some internal failure to de-provision the peer

  /context/entity/domains:

    get:
      tags:
        - entity
      summary: Returns all domains, or a specific domain, optionally at some revision
      description: >
        If no domain name is provided, then this function returns details of all
        currently-provisioned domains. If a specific checkpoint is provided, then details are
        returned for only the peers provisioned at that time. An entity version may not be specified
        if a specific domain is not requested.

        If a domain name is provided, then only details of that domain are returned. Either the
        checkpoint or the entity version (bot not both) may be provided to retrieve the domain at a
        specific revision.
      operationId: getDomains
      parameters:
        - in: query
          name: domainName
          schema:
            type: string
          required: false
          description: The name of a specific domain to resolve
        - in: query
          name: checkpoint
          schema:
            type: integer
          required: false
          description: Checkpoint to use in resolving domains (by default the latest is used)
        - in: query
          name: entityVersion
          schema:
            type: integer
          required: false
          description: Specific entity version to resolve (by default the latest is used)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './entity_schema.yaml#/components/schemas/DomainList'
              example:
                - name: operations
                  entityVersion: 1
                  policyName: HipaaSharing
                  modelName: SharingModel
                - name: reporting
                  entityVersion: 3
                  policyName: CustomerReporting
        '400':
          description: A query parameter was invalid, an entity version was given without an identified domain, or both an entity version and checkpoint were given
        '404':
          description: The named domain or checkpoint or entity version was unknown
        '500':
          description: There was some internal failure resolving the requested domains

    put:
      tags:
        - entity
      summary: Creates or updates the named domain, associating it with the policy named in the body of the message
      operationId: updateDomain
      parameters:
        - in: query
          name: domainName
          schema:
            type: string
          required: true
          description: The name of a specific domain to update
        - in: query
          name: policyName
          schema:
            type: string
          required: true
          description: The name of a policy for a domain to be associated with
        - in: query
          name: modelName
          schema:
            type: string
          required: false
          description: The optional name of a model for the domain to use
      responses:
        '200':
          description: OK
        '400':
          description: The domain or policy name was missing or invalid, or the model name was invalid
        '404':
          description: The domain, policy, or model was unknown
        '500':
          description: There was some internal failure to update the domain

  #
  # Datastore API paths
  #

  /datastore/exports:
  
    get:
      tags:
        - datastore
      summary: Returns information about active exported datastores
      operationId: getExportedDatastores
      parameters:
        - in: query
          name: domainName
          schema:
            type: string
          required: false
          description: Return exports only in the named domain 
        - in: query
          name: peerId
          schema:
            type: integer
          required: false
          description: Return exports only at the identified peer
        - in: query
          name: exportName
          schema:
            type: string
          required: false
          description: Return only the named export
        - in: query
          name: includeConfiguration
          schema:
            type: boolean
            default: false
          required: false
          description: If true, includes configuration details for each datastore export
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './datastore_schema.yaml#/components/schemas/DatastoreExportList'
              example:
                - domainName: operations
                  peerId: 1
                  export:
                    exportName: 60960483-2F97-4F6E-A570-EFE0E373FA67
                    datastoreType: postgres
                    datastorePort: 5432
                    datastoreConfiguration:
                      endpoint: "example.com:6789"
                - domainName: reporting
                  peerId: 1
                  export:
                    exportName: 6229DEEF-8357-4268-896D-0416E31F5CA9
                    datastoreType: postgres
                    datastorePort: 5432
                    datastoreConfiguration:
                      endpoint: "example.com:6789"
                - domainName: reporting
                  peerId: 2
                  export:
                    exportName: 19063B4E-C12B-4E5E-8181-B99C841DD594
                    datastoreType: s3
                    datastorePort: 8080
                    datastoreCertificate: AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
                    datastoreConfiguration:
                      endpoint: "example.com:8080"
        '400':
          description: A query parameter was mis-formatted
        '404':
          description: The domain, peer, or export is unknown

    post:
      tags:
        - datastore
      summary: Exports the datastore identified in the configuration, from the named domain at the identified peer
      operationId: exportDatastore
      parameters:
        - in: query
          name: domainName
          schema:
            type: string
          required: true
          description: Name of the domain where the datastore should be exported
        - in: query
          name: peerId
          schema:
            type: integer
          required: true
          description: Identifier of the peer where the datastore should be exported 
      requestBody:
        description: Datastore Configuration defining the export
        required: true
        content:
          application/json:
              schema:
                $ref: './datastore_schema.yaml#/components/schemas/DatastoreExportConfiguration'
              example:
                datastoreType: postgres
                endpoint: "example.com:6789"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './datastore_schema.yaml#/components/schemas/DatastoreExportDetails'
              example:
                exportName: 60960483-2F97-4F6E-A570-EFE0E373FA67
                datastoreType: postgres
                datastorePort: 5432
        '400':
          description: The format of the peer identifier or the Datastore Configuration is invalid
        '404':
          description: The identified peer or named domain is unknown
        '500':
          description: There was a failure to export the specified datastore

    delete:
      tags:
        - datastore
      summary: Revokes the named export, optionally validating the peer, domain, type and/or port
      operationId: revokeExport
      parameters:
        - in: query
          name: exportName
          schema:
            type: string
          required: true
          description: Name of the export to revoke
        - in: query
          name: domainName
          schema:
            type: string
          required: false
          description: Expected domain that contains the named export 
        - in: query
          name: peerId
          schema:
            type: integer
          required: false
          description: Expected peer that is hosting the named export
        - in: query
          name: datastoreType
          schema:
            type: string
          required: false
          description: Expected type of the named export
        - in: query
          name: datastorePort
          schema:
            type: integer
          required: false
          description: Expected port exposed by the named export
      responses:
        '200':
          description: OK
        '400':
          description: The name of the export is missing or the peerId and/or datastorePort parameters are invalid
        '404':
          description: The named export is unknown, or the domain, peer, type and/or port do not match the named export
        '500':
          description: There was a failure to revoke the named export

  #
  # Subject Context API paths
  #

  /context/subjects:

    parameters:
      - in: query
        name: subjectId
        schema:
          type: string
        required: true
        description: Identifier of a Subject

    get:
      tags:
        - subject
      summary: Returns the context for the named subject
      operationId: getSubject
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './subject_schema.yaml#/components/schemas/NamedSubject'
              example:
                subjectId: Patient/3
                properties:
                  state: Massachusetts
                  dob: 08-27-2015
                relationships:
                  - targetId: Patient/2
                    relationshipType: Parent
        '400':
          description: No subject was supplied
        '404':
          description: The requested subject was unknown
        '500':
          description: An internal error occured attempting to retrieve or return the subject's context

    put:
      tags:
        - subject
      summary: Provisions a new subject, or updates an existing subject
      operationId: createOrUpdateSubject
      requestBody:
        description: Subject definition to create or update
        required: true
        content:
          application/json:
              schema:
                $ref: './subject_schema.yaml#/components/schemas/Subject'
              example:
                properties:
                  state: Massachusetts
                  languages:
                    - english
                    - french
                relationships:
                  - targetId: BigCo
                    relationshipType: employee
                    properties:
                      role: developer
      responses:
        '200':
          description: OK
        '400':
          description: The subject was missing or the input was invalid
        '404':
          description: A policy named for a relationship was unknown
        '500':
          description: There was an internal error creating or updating the subject

  /context/subjects/bulk:

    post:
      tags:
        - subject
      summary: Creates multiple subjects with one call
      operationId: batchCreateSubjects
      requestBody:
        description: The subjects to create as a batch
        required: true
        content:
          application/json:
            schema:
              $ref: './subject_schema.yaml#/components/schemas/NamedSubjectList'
            example:
              - subjectId: Patient/1
              - subjectId: Patient/2
                properties:
                  state: massachusetts
              - subjectId: Patient/3
                relationships:
                  - targetId: SomeCompany
                    relationshipType: loyalty
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './subject_schema.yaml#/components/schemas/SubjectBatchResponse'
              example:
                successCount: 2
                errors:
                  - offset: 1
                    errorMsg: The subject Patient/2 already exists
        '400':
          description: The input was invalid
        '500':
          description: There was an error marshaling the response

  /context/subjects/relationships:

    parameters:
      - in: query
        name: subjectId
        schema:
          type: string
        required: true
        description: Identifier of a Subject
        
    get:
      tags:
        - subject
      summary: Returns relationships of the given subject
      description: >
        If both targetId and type are omitted, then all relationships of the subject are returned. If exactly one value is provided for both
        parameters, the the exact matching relationship is returned. If multiple, comma-separated, values are provided for one parameter
        (e.g., type=friend,family) then all matching relationships are returned.
      operationId: getRelationships
      parameters:
        - in: query
          name: targetId
          schema:
            type: string
          required: false
          description: Identifier of a target
        - in: query
          name: type
          schema:
            type: string
          required: false
          description: Name of a relationship
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './subject_schema.yaml#/components/schemas/NamedRelationshipList'
              example:
                - subjectId: Patient/3
                  targetId: HealthCo
                  relationshipType: provider
                  properties:
                    department: pediatrics
                - subjectId: Patient/3
                  targetId: PharmacyCo
                  relationshipType: consent
                  properties:
                    categories:
                      - prescriptions
                      - alergies
                      - conditions
        '400':
          description: The subject was missing or there were multiple values for both targetId and type parameters
        '404':
          description: The subject was unknown or there were no matching relationships
        '500':
          description: There was an internal error retreiving the subject or its relationships, or generating the response

    put:
      tags:
        - subject
      summary: Creates or updates a relationship of the given subject
      operationId: createOrUpdateRelationship
      requestBody:
        description: Relationship content
        required: true
        content:
          application/json:
            schema:
              $ref: './subject_schema.yaml#/components/schemas/Relationship'
            example:
              targetId: BillingApp
              relationshipType: consent
              properties:
                categories:
                  - encounters
                  - prescriptions
      responses:
        '200':
          description: OK
        '400':
          description: The subject was missing or the input was invalid
        '404':
          description: The identified subject was unknown
        '500':
          description: There was an internal error creating or updating the relationship

    delete:
      tags:
        - subject
      summary: Deprecates one or more relationships of the given subject
      description: >
        Follows the same query parameters rules as GET, with the exception that either targetId or type must be present with a value.
      operationId: deprecateRelationship
      parameters:
        - in: query
          name: targetId
          schema:
            type: string
          required: false
          description: Identifier of a target
        - in: query
          name: type
          schema:
            type: string
          required: false
          description: Name of a relationship
      responses:
        '200':
          description: OK
        '400':
          description: Neither targetId nor type was provided as a query parameter, or there were multiple values for both targetId and type parameters
        '500':
          description: An internal error kept the relationship(s) from being deprecated

  /context/groups:

    parameters:
      - in: query
        name: group
        schema:
          type: string
        required: true
        description: Identifier of a Group

    get:
      tags:
        - subject
      summary: Returns the context for the named group
      operationId: getGroup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './subject_schema.yaml#/components/schemas/NamedGroup'
              example:
                groupName: Providers
                properties:
                  state: Massachusetts
                members:
                  - name: HealthCo
                  - name: HealthOrg
                    properties:
                      pediatrics: true
        '400':
          description: No group was supplied
        '404':
          description: The requested group was unknown
        '500':
          description: An internal error occured attempting to retrieve or return the group's context

    put:
      tags:
        - subject
      summary: Provisions a new group, or updates an existing group
      operationId: createOrUpdateGroup
      requestBody:
        description: Group definition to create or update
        required: true
        content:
          application/json:
              schema:
                $ref: './subject_schema.yaml#/components/schemas/Group'
              example:
                properties:
                  state: Massachusetts
                members:
                  - name: HealthCo
                    properties:
                      pediatrics: false
      responses:
        '200':
          description: OK
        '400':
          description: The group was missing or the input was invalid
        '500':
          description: There was an internal error creating or updating the group

  /context/groups/members:

    parameters:
      - in: query
        name: group
        schema:
          type: string
        required: true
        description: Identifier of a Subject

    get:
      tags:
        - subject
      summary: Returns members of the given group
      description: >
        Returns the matching member, or any matches if multiple comma-separated values are provided for `member`.
      operationId: getMembers
      parameters:
        - in: query
          name: member
          schema:
            type: string
          required: true
          description: Name of one or more members
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: './subject_schema.yaml#/components/schemas/NamedMemberList'
              example:
                - groupName: Providers
                  name: HealthCo
                  properties:
                    pediatrics: false
        '400':
          description: The group or member was missing
        '404':
          description: The group was unknown or there were no matching members
        '500':
          description: There was an internal error retreiving the group or its members, or generating the response

    put:
      tags:
        - subject
      summary: Creates or updates a member of the given group
      operationId: createOrUpdateMember
      requestBody:
        description: Member content
        required: true
        content:
          application/json:
            schema:
              $ref: './subject_schema.yaml#/components/schemas/Member'
            example:
              name: HealthOrg
              properties:
                pediatrics: true
      responses:
        '200':
          description: OK
        '400':
          description: The group was missing or the input was invalid
        '404':
          description: The named group was unknown
        '500':
          description: There was an internal error creating or updating the member

    delete:
      tags:
        - subject
      summary: Deprecates one member of the given group
      operationId: deprecateMember
      parameters:
        - in: query
          name: member
          schema:
            type: string
          required: true
          description: Name of a member
      responses:
        '200':
          description: OK
        '400':
          description: Neither group nor member was provided as a query parameter, or there were multiple values for member
        '500':
          description: An internal error kept the member from being deprecated
